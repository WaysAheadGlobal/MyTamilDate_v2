import React, { useEffect } from 'react';
import { Carousel } from 'react-bootstrap';
import { PiCigaretteLight, PiWineFill } from "react-icons/pi";
import { useNavigate } from 'react-router-dom';
import { API_URL } from '../../../../api';
import { useCookies } from '../../../../hooks/useCookies';
import styles from './profiledetails.module.css';
import IconButton from './IconButton';
import { AiOutlineClose } from "react-icons/ai";

export default function ProfileDetails({ userId, handleIconButtonClick, liked, setLiked }) {
    const dialogRef = React.useRef(null);
    const navigate = useNavigate();
    const cookies = useCookies();
    const pathname = window.location.pathname;
    const getPhotoUrl = (userId, hash, extension, type) => 
        `https://data.mytamildate.com/storage/public/uploads/user/${userId}/${type === 1 ? "avatar" : "photo"}/${hash}-large.${extension === "png" ? "jpg" : extension}`;
    
    // const getPhotoUrl = (userId, hash, extension, type) => {
        
    //     const ext = extension === "png" ? "jpg" : extension;
      
    //     return type === 1 
    //       ? `https://data.mytamildate.com/storage/public/uploads/user/${userId}/avatar/${hash}-large.${ext}` 
    //       : `${API_URL}media/avatar/${hash}.${ext}`;
    //   };
    /**
     * @typedef {Object} Photo
     * @property {number} id - The unique identifier for the photo.
     * @property {string} hash - The hash value of the photo.
     * @property {string} extension - The file extension of the photo.
     * @property {number} type - The type/category of the photo.
     */

    /**
     * @typedef {Object} Answers
     * @property {number} id - The unique identifier for the answer.
     * @property {string} question - The question.
     * @property {string} answer - The answer. 
     */

    /**
     * @typedef {Object} Profile
     * @property {number} id - The unique identifier for the user.
     * @property {number} user_id - The user's ID.
     * @property {string} first_name - The user's first name.
     * @property {string} last_name - The user's last name.
     * @property {string} birthday - The user's date of birth in ISO 8601 format.
     * @property {number} location_id - The unique identifier for the user's location.
     * @property {number} job_id - The unique identifier for the user's job.
     * @property {string} created_at - The date and time when the user was created in ISO 8601 format.
     * @property {string} country - The country where the user resides.
     * @property {string} continent - The continent where the user resides.
     * @property {string} location_string - The string representation of the user's location.
     * @property {string} job - The user's job title.
     * @property {string} religion - The user's religion.
     * @property {string} study - The user's level of study.
     * @property {string} height - The user's height.
     * @property {string} kids - The user's stance on having children.
     * @property {Photo[]} photos - An array of photos associated with the user.
     * @property {string[]} personalities - An array of personalities associated with the user.
     * @property {Answers[]} answers - An array of answers associated with the user.
     * @property {string} smoke - The user's stance on smoking.
     * @property {string} drink - The user's stance on drinking.
     */

    /** @type {[Profile, React.Dispatch<React.SetStateAction<Profile>>]} */
    const [profile, setProfile] = React.useState({});
    const [media, setMedia] = React.useState([]);

    useEffect(() => {
        (async () => {
            const response = await fetch(`${API_URL}customer/user/profile/${userId}`, {
                headers: {
                    'Authorization': `Bearer ${cookies.getCookie('token')}`,
                },
            });
            const data = await response.json();
            if (!data) return;

            if (response.ok) {
                console.log(data)
                setProfile(data);
                setMedia(data.photos.map(photo => {
                    if (photo.type === 1 || photo.type === 2) {
                        return {
                            type: photo.type,
                            url: getPhotoUrl(data.user_id, photo.hash, photo.extension, photo.type),
                        };
                    } else {
                        return {
                            type: photo.type,
                            url: `${API_URL}media/avatar/${photo.hash}.${photo.extension}`
                        };
                    }
                }).sort((a, b) => a.type - b.type));
                console.log(data);
            }
        })()
    }, [userId]);

    return (
        <>
            {/* <dialog className={styles.gallery} ref={dialogRef}>
                <button
                    style={{
                        border: "none",
                        backgroundColor: "transparent",
                        position: "absolute",
                        zIndex: 100,
                        right: "1rem",
                        top: "1rem",
                    }}
                    onClick={() => dialogRef.current.close()}
                >
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                        <path d="M19 5L5 19M5.00001 5L19 19" stroke="white" stroke-width="1.5" stroke-linecap="round" stroke-linejoin="round" />
                    </svg>
                </button>
                <Carousel slide controls={false} interval={null} touch>
                    {
                        media.map((photo, index) => (
                            <Carousel.Item key={index} as="div">
                                <img src={photo.url} alt="" />
                            </Carousel.Item>
                        ))
                    }
                </Carousel>
            </dialog> */}
            <div
                className={styles.container}
            >
                {/* <div style={{
                    position: 'fixed',
                }}>
                    <button style={{
                        position: "absolute",
                        zIndex: 100,
                        top: "1rem",
                        left: "1rem",
                        backgroundColor: "transparent",
                        border: "none",
                    }} onClick={() => navigate("/user/home")}>
                        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                            <path d="M4 12L20 12M4 12L10 6M4 12L10 18" stroke="white" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
                        </svg>
                    </button>
                    <img src={media.filter(e => e.type === 1 || e.type === 31)[0]?.url} alt="" width={380} height={380}
                        style={{
                            borderRadius: "0.75rem",
                            objectFit: "cover",
                        }}
                    />
                </div> */}
                {/* <button className={styles.photoBtn} onClick={() => dialogRef.current.showModal()}>View Photos</button> */}
                <div className={styles.drawer} id="scroll-anchor">
                    <p className={styles.heading}>About Me</p>
                    <div className={styles.highlights}>
                        <span>
                            <svg width="7" height="18" viewBox="0 0 7 18" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path fill-rule="evenodd" clip-rule="evenodd" d="M2.75902 2.5699V15.4305L1.79147 14.4552C1.72257 14.3834 1.64005 14.3261 1.54872 14.2865C1.4574 14.2469 1.35909 14.2258 1.25954 14.2246C1.15999 14.2233 1.06118 14.2418 0.968882 14.2791C0.876582 14.3164 0.792635 14.3717 0.721937 14.4417C0.651239 14.5117 0.595205 14.595 0.557102 14.6869C0.518999 14.7788 0.49959 14.8773 0.500007 14.9767C0.500423 15.0762 0.520657 15.1745 0.559528 15.2661C0.598399 15.3576 0.655129 15.4405 0.726411 15.5099L2.97653 17.7775C3.04591 17.8478 3.12856 17.9036 3.21969 17.9418C3.31082 17.98 3.40863 17.9998 3.50746 18C3.60629 18.0002 3.70418 17.9808 3.79548 17.943C3.88677 17.9052 3.96965 17.8497 4.03934 17.7797L6.28945 15.5324C6.42608 15.3911 6.50168 15.2019 6.49997 15.0055C6.49826 14.8091 6.41938 14.6212 6.28032 14.4823C6.14125 14.3434 5.95313 14.2646 5.75648 14.2629C5.55982 14.2612 5.37036 14.3367 5.2289 14.4732L4.2591 15.4418V2.55792L5.2289 3.52651C5.37036 3.66296 5.55982 3.73847 5.75648 3.73676C5.95313 3.73506 6.14125 3.65627 6.28032 3.51738C6.41938 3.37849 6.49826 3.19061 6.49997 2.99419C6.50168 2.79778 6.42608 2.60856 6.28945 2.46727L4.03934 0.219959C3.9696 0.150052 3.8867 0.0946247 3.79542 0.0568731C3.70413 0.0191215 3.60627 -0.000207242 3.50746 1.67565e-06C3.40866 0.000210593 3.31088 0.0199531 3.21975 0.0580904C3.12863 0.0962277 3.04597 0.152005 2.97653 0.222206L0.726411 2.48975C0.597277 2.63289 0.528265 2.82018 0.533691 3.01278C0.539117 3.20538 0.618563 3.3885 0.755552 3.52416C0.892541 3.65982 1.07656 3.73761 1.26944 3.7414C1.46231 3.74518 1.64925 3.67467 1.79147 3.54449L2.75902 2.5699Z" fill="url(#paint0_linear_778_16578)" />
                                <defs>
                                    <linearGradient id="paint0_linear_778_16578" x1="0.5" y1="9" x2="6.5" y2="9" gradientUnits="userSpaceOnUse">
                                        <stop stop-color="#9663BF" />
                                        <stop offset="1" stop-color="#4B164C" />
                                    </linearGradient>
                                </defs>
                            </svg>
                            {profile.height}
                        </span>
                        {
                             profile.study == "Prefer not to say" || profile.study == null ? "" :
                             <span>
                             <svg width="25" height="20" viewBox="0 0 25 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                                 <path d="M18.4841 9.24414C18.3804 9.24414 18.2808 9.28537 18.2074 9.35875C18.1341 9.43214 18.0928 9.53166 18.0928 9.63545V13.9325C18.0936 14.0089 18.0757 14.0843 18.0407 14.1521C17.8205 14.5721 16.777 15.9438 12.6031 15.9438C8.42919 15.9438 7.38571 14.5737 7.16293 14.1532C7.12801 14.0855 7.11011 14.0103 7.11075 13.9341V9.80136C7.11075 9.69758 7.06953 9.59805 6.99614 9.52466C6.92276 9.45128 6.82323 9.41005 6.71945 9.41005C6.61567 9.41005 6.51614 9.45128 6.44275 9.52466C6.36937 9.59805 6.32814 9.69758 6.32814 9.80136V13.9325C6.32705 14.1355 6.37502 14.3358 6.46797 14.5163C6.81962 15.1805 8.11614 16.7264 12.6031 16.7264C17.0901 16.7264 18.3861 15.1821 18.7351 14.5184C18.8288 14.3379 18.8772 14.1374 18.876 13.9341V9.63545C18.876 9.58401 18.8658 9.53309 18.8461 9.48558C18.8264 9.43807 18.7976 9.39491 18.7612 9.35857C18.7248 9.32223 18.6816 9.29341 18.634 9.27378C18.5865 9.25414 18.5356 9.24407 18.4841 9.24414Z" fill="url(#paint0_linear_778_16581)" />
                                 <path d="M23.7103 6.94093L13.358 3.48284C13.2789 3.45624 13.1934 3.45624 13.1143 3.48284L1.45293 7.22163C1.37506 7.24725 1.30719 7.29666 1.25888 7.36288C1.21057 7.4291 1.18424 7.50881 1.18361 7.59078C1.18297 7.67275 1.20806 7.75286 1.25535 7.81982C1.30263 7.88679 1.36973 7.93723 1.44719 7.96406L12.3515 11.6496C12.3919 11.6633 12.4342 11.6703 12.4768 11.6705C12.5216 11.6704 12.566 11.6627 12.6082 11.6475L20.6122 8.78945V10.6677C20.3424 10.7492 20.1059 10.9151 19.9375 11.1411C19.7691 11.3671 19.6777 11.6412 19.6768 11.923V12.7119C19.6768 13.0617 19.8157 13.3972 20.0631 13.6445C20.3104 13.8919 20.6459 14.0308 20.9957 14.0308C21.3455 14.0308 21.681 13.8919 21.9284 13.6445C22.1757 13.3972 22.3147 13.0617 22.3147 12.7119V11.922C22.3139 11.6427 22.2244 11.3709 22.0591 11.1458C21.8938 10.9207 21.6611 10.754 21.3948 10.6698V8.5098L23.7171 7.68076C23.7938 7.6534 23.8601 7.60278 23.9066 7.53598C23.9532 7.46917 23.9778 7.38949 23.9769 7.30805C23.9761 7.22662 23.9498 7.14748 23.9018 7.08167C23.8539 7.01586 23.7865 6.96666 23.7093 6.94093H23.7103ZM21.53 12.7119C21.53 12.8541 21.4735 12.9906 21.3729 13.0911C21.2723 13.1917 21.1359 13.2482 20.9936 13.2482C20.8514 13.2482 20.715 13.1917 20.6144 13.0911C20.5138 12.9906 20.4573 12.8541 20.4573 12.7119V11.922C20.4573 11.8515 20.4711 11.7818 20.4981 11.7167C20.5251 11.6516 20.5646 11.5925 20.6144 11.5427C20.6642 11.4929 20.7233 11.4534 20.7884 11.4265C20.8534 11.3995 20.9232 11.3856 20.9936 11.3856C21.0641 11.3856 21.1338 11.3995 21.1989 11.4265C21.2639 11.4534 21.3231 11.4929 21.3729 11.5427C21.4227 11.5925 21.4622 11.6516 21.4891 11.7167C21.5161 11.7818 21.53 11.8515 21.53 11.922V12.7119ZM20.9477 7.83884L12.6453 6.94302C12.5935 6.93619 12.541 6.93979 12.4906 6.95359C12.4403 6.96739 12.3932 6.99112 12.3522 7.02337C12.3112 7.05563 12.2771 7.09577 12.2518 7.14142C12.2265 7.18708 12.2106 7.23732 12.205 7.28921C12.1995 7.3411 12.2043 7.39357 12.2194 7.44355C12.2344 7.49353 12.2592 7.54 12.2925 7.58022C12.3257 7.62045 12.3667 7.65362 12.4129 7.67779C12.4592 7.70195 12.5098 7.71662 12.5618 7.72093L19.2552 8.44302L12.4726 10.866L2.82353 7.60406L13.2312 4.26493L22.3882 7.32389L20.9477 7.83884Z" fill="url(#paint1_linear_778_16581)" />
                                 <defs>
                                     <linearGradient id="paint0_linear_778_16581" x1="6.32812" y1="12.9853" x2="18.876" y2="12.9853" gradientUnits="userSpaceOnUse">
                                         <stop stop-color="#9663BF" />
                                         <stop offset="1" stop-color="#4B164C" />
                                     </linearGradient>
                                     <linearGradient id="paint1_linear_778_16581" x1="1.18359" y1="8.74687" x2="23.977" y2="8.74687" gradientUnits="userSpaceOnUse">
                                         <stop stop-color="#9663BF" />
                                         <stop offset="1" stop-color="#4B164C" />
                                     </linearGradient>
                                 </defs>
                             </svg>
                             {profile.study}
                         </span>
                        
                        }
                       
                        {
                            profile.religion == "Prefer not to say" || profile.religion == null ? "" :
                        <span>
                            
                            <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M21.9289 20.6648L19.715 18.0988C19.8793 17.9652 20.0011 17.7866 20.0653 17.5848C20.1295 17.383 20.1334 17.1669 20.0765 16.9629C20.0196 16.759 19.9044 16.5761 19.745 16.4367C19.5857 16.2973 19.389 16.2074 19.1793 16.1782C19.1819 16.1659 19.1846 16.1537 19.1867 16.1413C19.224 15.9293 19.1976 15.711 19.1108 15.5141C19.024 15.3172 18.8808 15.1504 18.6992 15.0348C18.5176 14.9193 18.3058 14.8602 18.0907 14.865C17.8755 14.8699 17.6666 14.9384 17.4904 15.0619L17.2443 15.2344L16.3512 14.1993C16.3232 14.1671 16.3027 14.1291 16.291 14.0881C16.2794 14.047 16.2769 14.004 16.2837 13.9619C16.2845 13.957 16.2852 13.9521 16.2857 13.9473L16.7068 10.1618C16.7653 9.79011 16.7203 9.40946 16.5767 9.06163C16.5744 9.05606 16.5719 9.05057 16.5693 9.04515L13.3998 2.5361C13.345 2.40696 13.2601 2.2928 13.1522 2.20314C13.0443 2.11349 12.9165 2.05093 12.7795 2.02069C12.6426 1.99044 12.5003 1.9934 12.3647 2.0293C12.2291 2.0652 12.104 2.13301 12 2.22707C11.8959 2.13302 11.7708 2.06521 11.6352 2.02931C11.4996 1.99341 11.3574 1.99046 11.2204 2.0207C11.0835 2.05093 10.9557 2.11348 10.8478 2.20313C10.7399 2.29278 10.655 2.40693 10.6002 2.53606L7.43071 9.04515C7.42811 9.05057 7.42563 9.05606 7.42329 9.06163C7.27972 9.40946 7.23471 9.79011 7.29321 10.1618L7.7143 13.9473C7.71485 13.9521 7.71552 13.957 7.7163 13.9619C7.72313 14.004 7.72063 14.047 7.70898 14.088C7.69733 14.1291 7.67681 14.167 7.64887 14.1992L6.75571 15.2344L6.50966 15.0619C6.33344 14.9384 6.12454 14.8699 5.90939 14.8651C5.69424 14.8603 5.48249 14.9194 5.30092 15.0349C5.11935 15.1504 4.97611 15.3172 4.88931 15.5141C4.80252 15.711 4.77606 15.9293 4.81329 16.1412C4.81544 16.1537 4.81814 16.166 4.82071 16.1782C4.61101 16.2075 4.41441 16.2973 4.25504 16.4367C4.09567 16.5761 3.98048 16.759 3.92359 16.963C3.8667 17.1669 3.8706 17.383 3.9348 17.5848C3.99901 17.7866 4.12072 17.9652 4.28501 18.0988L2.07115 20.6648C2.04602 20.694 2.02687 20.7277 2.01479 20.7643C2.00272 20.8008 1.99796 20.8394 2.00079 20.8777C2.00362 20.9161 2.01398 20.9535 2.03127 20.9879C2.04857 21.0223 2.07247 21.0529 2.1016 21.078C2.13073 21.1032 2.16453 21.1223 2.20106 21.1344C2.23759 21.1465 2.27614 21.1512 2.31452 21.1484C2.35289 21.1456 2.39032 21.1352 2.42469 21.1179C2.45906 21.1006 2.48969 21.0767 2.51482 21.0476L4.76521 18.4391L7.54825 20.3901L6.60872 21.5197C6.55903 21.5794 6.53512 21.6564 6.54223 21.7338C6.54934 21.8112 6.5869 21.8826 6.64665 21.9323C6.7064 21.982 6.78343 22.0059 6.86081 21.9988C6.93819 21.9917 7.00958 21.9541 7.05927 21.8943L8.02969 20.7276L8.34977 20.952C8.52599 21.0755 8.73489 21.144 8.95005 21.1488C9.1652 21.1537 9.37696 21.0946 9.55853 20.979C9.7401 20.8635 9.88334 20.6967 9.97012 20.4998C10.0569 20.3028 10.0833 20.0846 10.0461 19.8726C10.0439 19.8601 10.0413 19.8478 10.0387 19.8354C10.2549 19.8052 10.4571 19.7106 10.6188 19.5639C10.7806 19.4172 10.8944 19.2251 10.9455 19.0128C10.9966 18.8005 10.9825 18.5778 10.9053 18.3735C10.828 18.1693 10.691 17.9931 10.5122 17.8678L10.446 17.8214L11.8655 16.1142C11.9141 16.0546 11.959 15.9921 11.9999 15.9271C12.0406 15.9917 12.0852 16.0538 12.1334 16.113L13.5278 17.8397L13.4878 17.8678C13.3089 17.993 13.1718 18.1692 13.0944 18.3735C13.017 18.5778 13.003 18.8006 13.0541 19.013C13.1052 19.2253 13.2191 19.4174 13.3809 19.5641C13.5428 19.7108 13.745 19.8053 13.9614 19.8354C13.9587 19.8478 13.9561 19.8601 13.9539 19.8726C13.9168 20.0845 13.9434 20.3027 14.0302 20.4995C14.1171 20.6963 14.2603 20.863 14.4418 20.9785C14.6233 21.094 14.835 21.1531 15.05 21.1484C15.2651 21.1436 15.474 21.0753 15.6502 20.9519L15.8996 20.7772L16.799 21.8911C16.8478 21.9515 16.9187 21.9901 16.9959 21.9983C17.0732 22.0066 17.1506 21.9837 17.211 21.9349C17.2715 21.8861 17.31 21.8153 17.3183 21.738C17.3265 21.6608 17.3037 21.5834 17.2549 21.5229L16.3805 20.4401L19.2348 18.4391L21.4852 21.0476C21.5103 21.0767 21.5409 21.1006 21.5753 21.1179C21.6097 21.1352 21.6471 21.1456 21.6855 21.1484C21.7239 21.1512 21.7624 21.1465 21.7989 21.1344C21.8355 21.1223 21.8693 21.1032 21.8984 21.078C21.9275 21.0529 21.9514 21.0223 21.9687 20.9879C21.986 20.9535 21.9964 20.9161 21.9992 20.8777C22.002 20.8394 21.9973 20.8008 21.9852 20.7643C21.9731 20.7277 21.954 20.694 21.9289 20.6648ZM9.38555 20.3493C9.30897 20.4582 9.19234 20.5322 9.06122 20.5553C8.93011 20.5783 8.79521 20.5484 8.6861 20.4722L4.68353 17.6663C4.62952 17.6285 4.58349 17.5803 4.54808 17.5247C4.51266 17.469 4.48856 17.407 4.47713 17.342C4.46571 17.2771 4.46719 17.2105 4.48149 17.1461C4.4958 17.0817 4.52265 17.0208 4.5605 16.9668C4.59836 16.9127 4.64648 16.8667 4.70212 16.8313C4.75776 16.7959 4.81984 16.7718 4.8848 16.7604C4.94975 16.7489 5.01633 16.7504 5.08071 16.7647C5.1451 16.779 5.20604 16.8059 5.26005 16.8437L5.2604 16.844L5.5947 17.0784L5.59771 17.0804L8.82715 19.3443C8.83008 19.3464 8.83301 19.3485 8.83602 19.3506L9.26286 19.6497C9.37186 19.7262 9.44602 19.8429 9.46903 19.9741C9.49204 20.1053 9.46201 20.2402 9.38555 20.3492V20.3493ZM10.2987 19.0472C10.2221 19.1561 10.1055 19.2302 9.97439 19.2532C9.84327 19.2762 9.70837 19.2463 9.59926 19.1701L5.92751 16.5961C5.92591 16.595 5.92439 16.5939 5.92278 16.5928L5.59673 16.3643C5.48765 16.2878 5.41342 16.1712 5.39036 16.04C5.3673 15.9088 5.3973 15.7738 5.47376 15.6647C5.55022 15.5556 5.66688 15.4814 5.79808 15.4583C5.92927 15.4353 6.06425 15.4653 6.17333 15.5417L6.63282 15.8638C6.6354 15.8657 6.63794 15.8675 6.64056 15.8693L10.1758 18.3476C10.2298 18.3854 10.2759 18.4335 10.3113 18.4892C10.3467 18.5448 10.3708 18.6069 10.3822 18.6719C10.3936 18.7369 10.3921 18.8034 10.3778 18.8678C10.3635 18.9322 10.3366 18.9932 10.2987 19.0472ZM11.707 8.83202C11.3508 8.83897 11.0094 8.9758 10.7469 9.21678C10.4845 9.45776 10.3191 9.7863 10.2818 10.1407L10.0151 12.6386C10.0069 12.7158 10.0297 12.7932 10.0785 12.8537C10.1273 12.9141 10.1981 12.9527 10.2754 12.961C10.3526 12.9692 10.43 12.9464 10.4905 12.8976C10.5509 12.8488 10.5895 12.778 10.5978 12.7007L10.8645 10.2028C10.8866 9.99235 10.984 9.79695 11.1389 9.65267C11.2937 9.50839 11.4955 9.42496 11.707 9.41777V14.9156C11.7068 15.2165 11.6032 15.5081 11.4134 15.7416L9.96461 17.4839L7.23794 15.5724L8.09259 14.582C8.17559 14.486 8.23677 14.3732 8.27188 14.2513C8.30699 14.1294 8.3152 14.0013 8.29594 13.8759L7.87481 10.0903C7.87426 10.0856 7.87361 10.0809 7.87286 10.0762C7.83029 9.81194 7.86101 9.5411 7.96169 9.29312L11.1306 2.78532C11.1332 2.77992 11.1357 2.77442 11.138 2.76891C11.1642 2.70575 11.2114 2.65362 11.2717 2.62139C11.332 2.58915 11.4016 2.57879 11.4687 2.59208C11.5358 2.60536 11.5962 2.64147 11.6396 2.69427C11.6831 2.74706 11.7069 2.81327 11.707 2.88164V8.83202ZM12.5882 15.7436C12.3976 15.5098 12.2933 15.2174 12.293 14.9156V9.41773C12.5045 9.42492 12.7063 9.50835 12.8611 9.65263C13.016 9.79691 13.1134 9.99231 13.1355 10.2028L13.4022 12.7007C13.4105 12.778 13.4491 12.8488 13.5095 12.8976C13.57 12.9464 13.6474 12.9692 13.7246 12.9609C13.8019 12.9527 13.8727 12.9141 13.9215 12.8536C13.9703 12.7932 13.9931 12.7158 13.9849 12.6385L13.7182 10.1406C13.6809 9.78627 13.5155 9.45774 13.2531 9.21676C12.9906 8.97579 12.6492 8.83897 12.293 8.83202V2.88164C12.293 2.8132 12.3167 2.74687 12.3602 2.69398C12.4036 2.64109 12.4641 2.60491 12.5312 2.5916C12.5984 2.5783 12.668 2.58871 12.7284 2.62104C12.7887 2.65337 12.8359 2.70563 12.862 2.76891C12.8643 2.77442 12.8668 2.77992 12.8694 2.78532L16.0383 9.29316C16.139 9.54112 16.1697 9.81195 16.1271 10.0762C16.1264 10.0809 16.1257 10.0855 16.1252 10.0903L15.7041 13.8759C15.6848 14.0013 15.693 14.1294 15.7281 14.2513C15.7633 14.3732 15.8244 14.4861 15.9075 14.582L16.7621 15.5725L14.0087 17.5026L12.5882 15.7436ZM13.7013 19.0472C13.6634 18.9932 13.6365 18.9323 13.6222 18.8679C13.6079 18.8035 13.6064 18.7369 13.6178 18.672C13.6292 18.607 13.6533 18.5449 13.6887 18.4892C13.7241 18.4336 13.7701 18.3855 13.8241 18.3476L17.3599 15.869C17.3622 15.8675 17.3645 15.8658 17.3668 15.8642L17.8267 15.5418C17.9358 15.4653 18.0708 15.4353 18.2019 15.4584C18.3331 15.4814 18.4498 15.5557 18.5262 15.6647C18.6027 15.7738 18.6327 15.9088 18.6096 16.04C18.5866 16.1712 18.5123 16.2878 18.4033 16.3643L14.7923 18.8956C14.79 18.8971 14.7878 18.8987 14.7856 18.9003L14.4007 19.1701C14.2916 19.2464 14.1567 19.2764 14.0256 19.2533C13.8945 19.2303 13.7778 19.1561 13.7013 19.0472ZM19.5228 17.342C19.5116 17.407 19.4876 17.4692 19.4521 17.5249C19.4167 17.5805 19.3706 17.6286 19.3164 17.6663L15.3139 20.4722C15.2599 20.5101 15.199 20.5369 15.1346 20.5513C15.0702 20.5656 15.0037 20.5671 14.9387 20.5557C14.8738 20.5443 14.8117 20.5202 14.756 20.4848C14.7004 20.4494 14.6522 20.4034 14.6144 20.3494C14.5765 20.2954 14.5496 20.2345 14.5353 20.1701C14.521 20.1057 14.5195 20.0391 14.5309 19.9742C14.5423 19.9092 14.5663 19.8471 14.6017 19.7915C14.6371 19.7358 14.6831 19.6877 14.7371 19.6498L18.7396 16.844L18.7398 16.8439L18.7399 16.8438C18.8213 16.7869 18.9177 16.7553 19.017 16.753C19.1163 16.7508 19.214 16.7781 19.2978 16.8314C19.3816 16.8847 19.4477 16.9617 19.4877 17.0526C19.5278 17.1435 19.54 17.2442 19.5228 17.342Z" fill="url(#paint0_linear_778_16586)" />
                                <defs>
                                    <linearGradient id="paint0_linear_778_16586" x1="2" y1="12" x2="22" y2="12" gradientUnits="userSpaceOnUse">
                                        <stop stop-color="#9663BF" />
                                        <stop offset="1" stop-color="#4B164C" />
                                    </linearGradient>
                                </defs>
                            </svg>
                            {profile.religion}
                        </span>
}
                        <span>
                            <svg width="25" height="24" viewBox="0 0 25 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                <path d="M2.5 12.5C2.36739 12.5 2.24021 12.4473 2.14645 12.3536C2.05268 12.2598 2 12.1326 2 12V2.5C2.00026 2.23486 2.10571 1.98066 2.29319 1.79319C2.48066 1.60571 2.73486 1.50026 3 1.5H12C12.2651 1.50026 12.5193 1.60571 12.7068 1.79319C12.8943 1.98066 12.9997 2.23486 13 2.5V9.5C12.9997 9.76513 12.8943 10.0193 12.7068 10.2068C12.5193 10.3943 12.2651 10.4997 12 10.5H4.707L2.8535 12.3535C2.8071 12.4 2.75199 12.4368 2.69133 12.4619C2.63068 12.4871 2.56566 12.5 2.5 12.5ZM12 2.499L3 2.5V10.793L4.1465 9.6465C4.24025 9.55272 4.3674 9.50003 4.5 9.5H12V2.499ZM22.5 22.5C22.4343 22.5 22.3693 22.4871 22.3087 22.4619C22.248 22.4368 22.1929 22.4 22.1465 22.3535L20.293 20.5H13C12.7349 20.4997 12.4807 20.3943 12.2932 20.2068C12.1057 20.0193 12.0003 19.7651 12 19.5V12.5C12.0003 12.2349 12.1057 11.9807 12.2932 11.7932C12.4807 11.6057 12.7349 11.5003 13 11.5H22C22.2651 11.5003 22.5193 11.6057 22.7068 11.7932C22.8943 11.9807 22.9997 12.2349 23 12.5V22C23 22.1326 22.9473 22.2598 22.8536 22.3536C22.7598 22.4473 22.6326 22.5 22.5 22.5ZM13 12.5V19.5H20.5C20.6326 19.5 20.7598 19.5527 20.8535 19.6465L22 20.793V12.5H13Z" fill="url(#paint0_linear_778_16590)" />
                                <path d="M5.99947 8.5C5.87303 8.49987 5.75133 8.45183 5.65888 8.36557C5.56644 8.2793 5.51011 8.16122 5.50123 8.03509C5.49236 7.90896 5.5316 7.78415 5.61106 7.68579C5.69052 7.58744 5.80429 7.52284 5.92947 7.505C6.5792 7.41034 7.1813 7.10938 7.64697 6.6465C7.96987 6.32341 8.2155 5.93146 8.36547 5.5H6.00047C5.86786 5.5 5.74068 5.44732 5.64692 5.35355C5.55315 5.25979 5.50047 5.13261 5.50047 5C5.50047 4.86739 5.55315 4.74021 5.64692 4.64645C5.74068 4.55268 5.86786 4.5 6.00047 4.5H9.00047C9.07209 4.5 9.14287 4.51539 9.20802 4.54512C9.27318 4.57485 9.33119 4.61823 9.37812 4.67232C9.42506 4.72641 9.45983 4.78996 9.48007 4.85866C9.50032 4.92735 9.50557 4.9996 9.49547 5.0705C9.37213 5.93493 8.9717 6.73603 8.35431 7.35351C7.73692 7.97099 6.93588 8.37153 6.07147 8.495C6.04778 8.49836 6.02339 8.50003 5.99947 8.5Z" fill="url(#paint1_linear_778_16590)" />
                                <path d="M7.50003 5.5C7.36742 5.5 7.24024 5.44732 7.14647 5.35355C7.0527 5.25979 7.00003 5.13261 7.00003 5V4C7.00003 3.86739 7.0527 3.74021 7.14647 3.64645C7.24024 3.55268 7.36742 3.5 7.50003 3.5C7.63263 3.5 7.75981 3.55268 7.85358 3.64645C7.94735 3.74021 8.00003 3.86739 8.00003 4V5C8.00003 5.13261 7.94735 5.25979 7.85358 5.35355C7.75981 5.44732 7.63263 5.5 7.50003 5.5ZM9.50052 8.5C9.48752 8.5 9.47419 8.4995 9.46053 8.4985C8.87892 8.45347 8.31577 8.27377 7.81558 7.9736C7.31539 7.67344 6.89188 7.26104 6.57853 6.769C6.50718 6.65721 6.48317 6.52166 6.51177 6.39217C6.54037 6.26267 6.61924 6.14984 6.73103 6.0785C6.84281 6.00716 6.97837 5.98314 7.10786 6.01174C7.23735 6.04034 7.35018 6.11921 7.42153 6.231C7.65153 6.59267 7.96265 6.89575 8.33021 7.1162C8.69778 7.33665 9.11166 7.4684 9.53902 7.501C9.66942 7.509 9.79151 7.56771 9.87916 7.66458C9.96682 7.76145 10.0131 7.88877 10.008 8.01932C10.003 8.14986 9.94709 8.27325 9.85224 8.36308C9.75739 8.45292 9.63115 8.50206 9.50052 8.5ZM15.4995 18.5C15.4144 18.4999 15.3307 18.478 15.2563 18.4364C15.182 18.3949 15.1195 18.3351 15.0748 18.2626C15.0301 18.1901 15.0046 18.1074 15.0008 18.0224C14.997 17.9373 15.015 17.8527 15.053 17.7765L17.053 13.7765C17.1147 13.6621 17.2185 13.5763 17.3424 13.5371C17.4662 13.4979 17.6005 13.5085 17.7167 13.5666C17.8329 13.6247 17.922 13.7258 17.965 13.8484C18.0079 13.971 18.0015 14.1055 17.947 14.2235L15.947 18.2235C15.9055 18.3065 15.8417 18.3764 15.7628 18.4252C15.6838 18.4741 15.5924 18.5 15.4995 18.5Z" fill="url(#paint2_linear_778_16590)" />
                                <path d="M19.5014 18.5018C19.4085 18.5018 19.3174 18.476 19.2384 18.4272C19.1593 18.3783 19.0954 18.3084 19.0539 18.2253L17.0539 14.2253C16.9994 14.1073 16.993 13.9728 17.036 13.8502C17.079 13.7276 17.168 13.6265 17.2842 13.5684C17.4004 13.5103 17.5347 13.4997 17.6586 13.5389C17.7825 13.5781 17.8862 13.6639 17.9479 13.7783L19.9479 17.7783C19.9859 17.8544 20.0039 17.939 20.0001 18.0241C19.9964 18.1091 19.9709 18.1917 19.9263 18.2642C19.8816 18.3366 19.8192 18.3965 19.7449 18.4381C19.6707 18.4797 19.5865 18.5016 19.5014 18.5018Z" fill="url(#paint3_linear_778_16590)" />
                                <path d="M19.2414 16.9852H15.7584C15.6258 16.9852 15.4986 16.9325 15.4048 16.8387C15.3111 16.745 15.2584 16.6178 15.2584 16.4852C15.2584 16.3526 15.3111 16.2254 15.4048 16.1316C15.4986 16.0378 15.6258 15.9852 15.7584 15.9852H19.2414C19.374 15.9852 19.5012 16.0378 19.5949 16.1316C19.6887 16.2254 19.7414 16.3526 19.7414 16.4852C19.7414 16.6178 19.6887 16.745 19.5949 16.8387C19.5012 16.9325 19.374 16.9852 19.2414 16.9852ZM5.49989 13.5017C5.40102 13.5016 5.30437 13.4723 5.22216 13.4174C5.13996 13.3624 5.07589 13.2843 5.03805 13.193C5.00022 13.1016 4.99032 13.0011 5.0096 12.9042C5.02889 12.8072 5.07649 12.7181 5.14639 12.6482L6.14639 11.6482C6.24069 11.5571 6.367 11.5067 6.49809 11.5078C6.62919 11.509 6.7546 11.5616 6.8473 11.6543C6.94001 11.747 6.99259 11.8724 6.99373 12.0035C6.99487 12.1346 6.94447 12.2609 6.85339 12.3552L5.85339 13.3552C5.80702 13.4017 5.75192 13.4385 5.69126 13.4637C5.6306 13.4888 5.56556 13.5017 5.49989 13.5017Z" fill="url(#paint4_linear_778_16590)" />
                                <path d="M7.50167 13.5017C7.436 13.5017 7.37097 13.4888 7.3103 13.4637C7.24964 13.4385 7.19454 13.4017 7.14817 13.3552L6.14817 12.3552C6.05709 12.2609 6.00669 12.1346 6.00783 12.0035C6.00897 11.8724 6.06155 11.747 6.15426 11.6543C6.24696 11.5616 6.37237 11.509 6.50347 11.5078C6.63457 11.5067 6.76087 11.5571 6.85517 11.6482L7.85517 12.6482C7.92507 12.7181 7.97268 12.8072 7.99196 12.9042C8.01124 13.0011 8.00134 13.1016 7.96351 13.193C7.92567 13.2843 7.8616 13.3624 7.7794 13.4174C7.69719 13.4723 7.60054 13.5016 7.50167 13.5017Z" fill="url(#paint5_linear_778_16590)" />
                                <path d="M10.5 17.5017H7C6.73486 17.5014 6.48066 17.396 6.29319 17.2085C6.10571 17.021 6.00026 16.7668 6 16.5017V12.0017C6 11.8691 6.05268 11.7419 6.14645 11.6481C6.24021 11.5543 6.36739 11.5017 6.5 11.5017C6.63261 11.5017 6.75979 11.5543 6.85355 11.6481C6.94732 11.7419 7 11.8691 7 12.0017V16.5017H10.5C10.6326 16.5017 10.7598 16.5543 10.8536 16.6481C10.9473 16.7419 11 16.8691 11 17.0017C11 17.1343 10.9473 17.2615 10.8536 17.3552C10.7598 17.449 10.6326 17.5017 10.5 17.5017ZM18.5 10.5017C18.4011 10.5016 18.3045 10.4723 18.2223 10.4174C18.1401 10.3624 18.076 10.2843 18.0382 10.193C18.0003 10.1016 17.9904 10.0011 18.0097 9.90415C18.029 9.80718 18.0766 9.71809 18.1465 9.64817L19.1465 8.64817C19.2408 8.55709 19.3671 8.50669 19.4982 8.50783C19.6293 8.50897 19.7547 8.56156 19.8474 8.65426C19.9401 8.74696 19.9927 8.87237 19.9938 9.00347C19.995 9.13457 19.9446 9.26087 19.8535 9.35517L18.8535 10.3552C18.8071 10.4017 18.752 10.4385 18.6914 10.4637C18.6307 10.4888 18.5657 10.5017 18.5 10.5017Z" fill="url(#paint6_linear_778_16590)" />
                                <path d="M18.5017 10.5017C18.436 10.5017 18.371 10.4888 18.3103 10.4637C18.2496 10.4385 18.1945 10.4017 18.1482 10.3552L17.1482 9.35517C17.0571 9.26087 17.0067 9.13457 17.0078 9.00347C17.009 8.87237 17.0616 8.74696 17.1543 8.65426C17.247 8.56156 17.3724 8.50897 17.5035 8.50783C17.6346 8.50669 17.7609 8.55709 17.8552 8.64817L18.8552 9.64817C18.9251 9.71809 18.9727 9.80718 18.992 9.90415C19.0112 10.0011 19.0013 10.1016 18.9635 10.193C18.9257 10.2843 18.8616 10.3624 18.7794 10.4174C18.6972 10.4723 18.6005 10.5016 18.5017 10.5017Z" fill="url(#paint7_linear_778_16590)" />
                                <path d="M18.5 10.5C18.3674 10.5 18.2402 10.4473 18.1464 10.3536C18.0527 10.2598 18 10.1326 18 10V5.5H14.5C14.3674 5.5 14.2402 5.44732 14.1464 5.35355C14.0527 5.25979 14 5.13261 14 5C14 4.86739 14.0527 4.74021 14.1464 4.64645C14.2402 4.55268 14.3674 4.5 14.5 4.5H18C18.2651 4.50026 18.5193 4.60571 18.7068 4.79319C18.8943 4.98066 18.9997 5.23486 19 5.5V10C19 10.1326 18.9473 10.2598 18.8536 10.3536C18.7598 10.4473 18.6326 10.5 18.5 10.5Z" fill="url(#paint8_linear_778_16590)" />
                                <defs>
                                    <linearGradient id="paint0_linear_778_16590" x1="2" y1="12" x2="23" y2="12" gradientUnits="userSpaceOnUse">
                                        <stop stop-color="#9663BF" />
                                        <stop offset="1" stop-color="#4B164C" />
                                    </linearGradient>
                                    <linearGradient id="paint1_linear_778_16590" x1="5.5" y1="6.5" x2="9.50046" y2="6.5" gradientUnits="userSpaceOnUse">
                                        <stop stop-color="#9663BF" />
                                        <stop offset="1" stop-color="#4B164C" />
                                    </linearGradient>
                                    <linearGradient id="paint2_linear_778_16590" x1="6.5" y1="11" x2="17.9931" y2="11" gradientUnits="userSpaceOnUse">
                                        <stop stop-color="#9663BF" />
                                        <stop offset="1" stop-color="#4B164C" />
                                    </linearGradient>
                                    <linearGradient id="paint3_linear_778_16590" x1="17.0078" y1="16.0087" x2="20.0006" y2="16.0087" gradientUnits="userSpaceOnUse">
                                        <stop stop-color="#9663BF" />
                                        <stop offset="1" stop-color="#4B164C" />
                                    </linearGradient>
                                    <linearGradient id="paint4_linear_778_16590" x1="5" y1="14.2465" x2="19.7414" y2="14.2465" gradientUnits="userSpaceOnUse">
                                        <stop stop-color="#9663BF" />
                                        <stop offset="1" stop-color="#4B164C" />
                                    </linearGradient>
                                    <linearGradient id="paint5_linear_778_16590" x1="6.00781" y1="12.5047" x2="8.00156" y2="12.5047" gradientUnits="userSpaceOnUse">
                                        <stop stop-color="#9663BF" />
                                        <stop offset="1" stop-color="#4B164C" />
                                    </linearGradient>
                                    <linearGradient id="paint6_linear_778_16590" x1="6" y1="13.0047" x2="19.9939" y2="13.0047" gradientUnits="userSpaceOnUse">
                                        <stop stop-color="#9663BF" />
                                        <stop offset="1" stop-color="#4B164C" />
                                    </linearGradient>
                                    <linearGradient id="paint7_linear_778_16590" x1="17.0078" y1="9.50474" x2="19.0016" y2="9.50474" gradientUnits="userSpaceOnUse">
                                        <stop stop-color="#9663BF" />
                                        <stop offset="1" stop-color="#4B164C" />
                                    </linearGradient>
                                    <linearGradient id="paint8_linear_778_16590" x1="14" y1="7.5" x2="19" y2="7.5" gradientUnits="userSpaceOnUse">
                                        <stop stop-color="#9663BF" />
                                        <stop offset="1" stop-color="#4B164C" />
                                    </linearGradient>
                                </defs>
                            </svg>
                            {profile.languages}
                        </span>
                        {
                            profile.kids == "Prefer not to say" || profile.kids == null ? "" :
                                <span>
                                    <svg width="14" height="24" viewBox="0 0 14 24" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path d="M0.165627 2.28231L0.428126 4.19481L0.428126 4.26981L1.21563 6.66981C1.10313 6.93231 1.14063 7.23231 1.25313 7.49481C1.36563 7.75731 1.59063 7.94481 1.85313 8.05731C1.92813 9.63231 2.82813 11.0573 4.21563 11.9198C4.17813 13.6073 3.87813 14.8823 3.42813 15.5198L3.42813 15.5573C3.42813 15.5573 3.42813 15.5948 3.39063 15.5948L1.55312 19.4948C1.47812 19.6823 1.55313 19.8698 1.70313 19.9448L0.503126 22.1948C0.428126 22.3823 0.390625 22.5698 0.390625 22.7198C0.390625 23.2073 0.690625 23.6573 1.14063 23.8823C1.44063 24.0323 1.77812 24.0323 2.11563 23.9198C2.45313 23.8073 2.67813 23.5823 2.82813 23.2823L4.02813 21.0323C4.14063 21.0698 4.29063 20.9948 4.36563 20.9198C4.70313 20.5073 5.19063 20.0948 5.86563 19.6448C6.69063 19.1198 7.74063 19.1573 8.49063 19.7573C9.20313 20.3198 9.91563 20.9573 9.91563 20.9573C9.99063 21.0323 10.1406 21.0698 10.2531 21.0323L11.4531 23.2448C11.6031 23.5448 11.8656 23.8073 12.1656 23.9198C12.5031 24.0323 12.8406 24.0323 13.1406 23.8823C13.5906 23.6573 13.8906 23.2073 13.8906 22.7198C13.8906 22.5323 13.8531 22.3448 13.7781 22.1573L12.5781 19.9448C12.6156 19.9073 12.6906 19.8323 12.6906 19.7948C12.7281 19.7198 12.7281 19.6073 12.6906 19.5323L10.7406 15.5948C10.7406 15.5948 10.0281 13.9073 9.95313 11.8073C10.6281 11.3198 11.1531 10.6073 11.4531 9.81981C11.5281 9.63231 11.6406 9.29481 11.7156 8.99481C12.0531 8.91981 12.3531 8.65731 12.5031 8.31981C12.5781 8.16981 12.5781 8.01981 12.5781 7.86981C12.6156 7.86981 12.6156 7.83231 12.6531 7.83231C12.7281 7.75731 12.8031 7.64481 12.8031 7.53231C12.8031 7.49481 12.8031 7.15731 12.7281 6.74481L12.7281 6.70731L13.5156 4.30731L13.5156 4.23231L13.8156 2.31981C14.0031 1.71981 13.7031 1.04481 13.0656 0.819809C12.9156 0.782308 12.8031 0.744808 12.6531 0.744808C12.3531 0.744808 12.0156 0.857309 11.7906 1.08231C11.6781 1.19481 11.5656 1.34481 11.4906 1.53231L11.4906 1.60731L11.1906 3.44481C9.76563 1.56981 7.10313 0.144809 6.99063 0.0698084C6.99063 -0.00519241 6.91563 -0.00519241 6.84063 -0.00519242C6.72813 -0.00519243 6.65313 0.0323079 6.57813 0.107307C6.46563 0.219808 4.02813 2.69481 2.90313 4.04481L2.75313 3.55731L2.45313 1.60731L2.45313 1.53231C2.37813 1.34481 2.30313 1.19481 2.15313 1.08231C1.92813 0.857308 1.62813 0.744807 1.29063 0.744807C1.14063 0.744807 1.02813 0.782307 0.878128 0.819808C0.578128 0.932307 0.315627 1.15731 0.203127 1.45731C0.0906268 1.68231 0.0531273 2.01981 0.165627 2.28231ZM2.15312 22.9448C2.07813 23.0948 1.96563 23.1698 1.85313 23.2448C1.70313 23.2823 1.55313 23.2823 1.44063 23.2448C1.25313 23.1698 1.10313 22.9448 1.10313 22.7573C1.10313 22.6823 1.10312 22.6073 1.14063 22.5323L2.34063 20.2823L2.79062 20.5073L3.31563 20.7698L2.15312 22.9448ZM13.1406 22.7198C13.1406 22.9448 13.0281 23.1323 12.8031 23.2073C12.7656 23.2448 12.6906 23.2823 12.6156 23.2823C12.5406 23.2823 12.5031 23.2823 12.4281 23.2448C12.2781 23.2073 12.1656 23.0948 12.0906 22.9448L10.8906 20.7323L11.9031 20.2448L13.1031 22.4948C13.1406 22.5698 13.1406 22.6448 13.1406 22.7198ZM11.6781 19.5698L10.2531 20.2448L10.2156 20.2448C9.95313 20.0198 9.46563 19.5698 8.94063 19.1573C7.92813 18.3323 6.54063 18.2948 5.45313 19.0073C4.85313 19.4198 4.32813 19.8323 3.99063 20.2073L2.37813 19.4573L3.95313 16.1198L10.1781 16.0823L11.8656 19.4948L11.6781 19.5698ZM9.91563 15.3698L4.36563 15.3698C4.74063 14.5073 4.89063 13.3448 4.96563 12.2948L5.19063 12.4073L5.22813 12.4073C5.71563 12.5948 6.20313 12.6698 6.69063 12.7073C7.62813 12.7823 8.49063 12.5573 9.24063 12.1823C9.35313 13.6073 9.69063 14.7323 9.91563 15.3698ZM11.8281 7.98231C11.7531 8.13231 11.6031 8.24481 11.4156 8.24481C11.2281 8.24481 11.0781 8.35731 11.0406 8.54481C11.0031 8.76981 10.8906 9.21981 10.7781 9.51981C10.1781 11.1323 8.52813 12.1073 6.72813 11.9948C6.27813 11.9573 5.86563 11.8823 5.45313 11.7323C5.41563 11.7323 5.41563 11.7323 5.37813 11.6948C3.69063 11.0573 2.52813 9.48231 2.52813 7.79481C2.52813 7.60731 2.37813 7.45731 2.19063 7.41981C2.19063 7.41981 2.15313 7.41981 2.11563 7.38231C1.92813 7.30731 1.81563 7.08231 1.89063 6.89481L1.89063 6.81981C1.92813 6.78231 1.92813 6.74481 1.96563 6.74481C2.00313 6.70731 2.07813 6.66981 2.15313 6.63231L2.22813 6.63231C2.34063 6.63231 2.49063 6.63231 2.71563 6.59481L2.75313 6.59481C2.86563 6.55731 3.01563 6.51981 3.16563 6.48231C3.24063 6.44481 3.31563 6.44481 3.42813 6.40731L3.46563 6.40731C3.57813 6.36981 3.65313 6.33231 3.76563 6.29481C4.21563 6.10731 4.70313 5.80731 5.34063 5.39481L5.37813 5.35731C5.56563 5.46981 5.86563 5.65731 6.20313 5.84481C6.31563 5.91981 6.46563 5.95731 6.57813 6.03231L6.61563 6.03231C6.72813 6.06981 6.87813 6.14481 7.02813 6.18231L7.06563 6.18231L7.51563 6.29481L7.59063 6.29481C7.74063 6.33231 7.92813 6.36981 8.07813 6.36981C8.26563 6.40731 8.41563 6.40731 8.60313 6.40731L9.09063 6.40731C9.16563 6.40731 9.20313 6.40731 9.27813 6.36981C9.35313 6.36981 9.39063 6.36981 9.46563 6.33231C9.54063 6.33231 9.61563 6.29481 9.65313 6.29481C9.72813 6.29481 9.76563 6.25731 9.84063 6.25731C9.91563 6.25731 9.99063 6.21981 10.0281 6.21981C10.1406 6.36981 10.2906 6.59481 10.5156 6.78231C10.7406 7.00731 11.0406 7.23231 11.3781 7.41981C11.3781 7.41981 11.4156 7.41981 11.4156 7.45731L11.4531 7.45731C11.8281 7.64481 11.9031 7.83231 11.8281 7.98231ZM11.9031 3.74481L11.9031 3.66981L12.2406 1.71981C12.2781 1.64481 12.2781 1.60731 12.3531 1.56981C12.4656 1.45731 12.6906 1.38231 12.8406 1.45731C13.1031 1.53231 13.2156 1.83231 13.1406 2.05731L13.1406 2.13231L12.8406 4.04481L12.3906 5.35731C12.3531 5.24481 12.3156 5.13231 12.2406 5.01981C12.2406 4.98231 12.2031 4.94481 12.2031 4.94481L12.2031 4.90731C12.2031 4.86981 12.1656 4.86981 12.1656 4.83231L12.1656 4.79481C12.0906 4.64481 11.9781 4.49481 11.9031 4.38231C11.8656 4.30731 11.8281 4.26981 11.7906 4.19481L11.9031 3.74481ZM6.91563 0.819808C7.66563 1.26981 10.1031 2.76981 11.0406 4.45731C11.0781 4.56981 11.1906 4.68231 11.2656 4.79481C11.3406 4.90731 11.4531 5.05731 11.4906 5.16981C11.4906 5.20731 11.5281 5.20731 11.5281 5.24481C11.6781 5.50731 11.7531 5.76981 11.8281 6.03231C11.8281 6.06981 11.8281 6.10731 11.8656 6.14481C11.9031 6.21981 11.9031 6.29481 11.9406 6.36981C11.9406 6.44481 11.9781 6.51981 11.9781 6.55731L11.9781 6.85731L11.9406 6.85731C11.9406 6.85731 11.9031 6.85731 11.9031 6.81981C11.5656 6.63231 11.3031 6.44481 11.1156 6.25731C10.8156 5.91981 10.6656 5.65731 10.6656 5.65731C10.6281 5.58231 10.5531 5.50731 10.4781 5.46981C10.4031 5.43231 10.2906 5.43231 10.2156 5.46981C7.74063 6.33231 5.67813 4.64481 5.67813 4.64481C5.64063 4.60731 5.56563 4.56981 5.49063 4.56981L5.34063 4.56981C5.30313 4.56981 5.26563 4.60731 5.26563 4.60731C5.22813 4.64481 5.19063 4.64481 5.15313 4.68231C3.87813 5.54481 3.05313 5.80731 2.64063 5.88231C2.67813 5.76981 2.71563 5.61981 2.75313 5.50731C2.82813 5.31981 2.94063 5.13231 3.05313 4.94481C3.61563 4.19481 6.20313 1.56981 6.91563 0.819808ZM0.878128 1.71981C0.915628 1.60731 1.02813 1.53231 1.14063 1.45731C1.32813 1.38231 1.51563 1.41981 1.66563 1.56981C1.70313 1.60731 1.74063 1.64481 1.77813 1.71981L2.07813 3.66981L2.07813 3.74481L2.41563 4.75731C2.37813 4.79481 2.37813 4.83231 2.34063 4.90731C2.34063 4.94481 2.30313 4.98231 2.30313 5.01981C2.26563 5.13231 2.19063 5.24481 2.15313 5.31981L2.04063 5.65731C2.04063 5.69481 2.04063 5.73231 2.00313 5.73231C1.96563 5.80731 1.96563 5.91981 1.96563 5.99481L1.96563 6.03231L1.92813 6.03231C1.89063 6.03231 1.85313 6.06981 1.85313 6.06981L1.17813 4.08231L0.878128 2.16981L0.878128 2.09481C0.803128 1.98231 0.803128 1.83231 0.878128 1.71981Z" fill="#4E1173" />
                                    </svg>

                                    {profile.kids}
                                </span>
                        }
                        {
                            profile.smoke == "Prefer not to say" || profile.smoke == null ? "" :
                                <span>
                                    {/* <PiCigaretteLight size={20} color='#4e1173' /> */}
                                    <svg width="20" height="14" viewBox="0 0 20 14" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path fill-rule="evenodd" clip-rule="evenodd" d="M16.5 0.5C16.5 0.22385 16.7239 0 17 0C18.3807 0 19.5 1.1193 19.5 2.5V3.29545C19.5 3.9895 19.1793 4.60865 18.6779 5.01275C19.4756 5.55195 20 6.4647 20 7.5V9C20 9.27615 19.7761 9.5 19.5 9.5C19.2239 9.5 19 9.27615 19 9V7.5C19 6.39545 18.1045 5.5 17 5.5C16.7239 5.5 16.5 5.27615 16.5 5C16.5 4.72385 16.7239 4.5 17 4.5H17.2955C17.9607 4.5 18.5 3.9607 18.5 3.29545V2.5C18.5 1.67155 17.8284 1 17 1C16.7239 1 16.5 0.77615 16.5 0.5ZM15 3.5C14.1715 3.5 13.5 4.17155 13.5 5V5.9091C13.5 6.7375 14.1715 7.4091 15 7.4091H16.5C17.3284 7.4091 18 8.08065 18 8.9091V9C18 9.27615 17.7761 9.5 17.5 9.5C17.2239 9.5 17 9.27615 17 9V8.9091C17 8.63295 16.7761 8.4091 16.5 8.4091H15C13.6193 8.4091 12.5 7.2898 12.5 5.9091V5C12.5 3.6193 13.6193 2.5 15 2.5C15.2761 2.5 15.5 2.72385 15.5 3C15.5 3.27615 15.2761 3.5 15 3.5ZM1.5 10C0.671575 10 0 10.6715 0 11.5V12.5C0 13.3285 0.671575 14 1.5 14H14.5C15.3285 14 16 13.3285 16 12.5V11.5C16 10.6715 15.3285 10 14.5 10H1.5ZM1 11.5C1 11.2239 1.22386 11 1.5 11H14.5C14.7761 11 15 11.2239 15 11.5V12.5C15 12.7761 14.7761 13 14.5 13H1.5C1.22386 13 1 12.7761 1 12.5V11.5ZM18 11C18 10.7239 17.7761 10.5 17.5 10.5C17.2239 10.5 17 10.7239 17 11V13C17 13.2761 17.2239 13.5 17.5 13.5C17.7761 13.5 18 13.2761 18 13V11ZM20 11C20 10.7239 19.7761 10.5 19.5 10.5C19.2239 10.5 19 10.7239 19 11V13C19 13.2761 19.2239 13.5 19.5 13.5C19.7761 13.5 20 13.2761 20 13V11Z" fill="#4E1173" />
                                    </svg>
                                    <p>{profile.smoke}</p>
                                </span>
                        }
                        {
                            profile.drink == "Prefer not to say" || profile.drink == null ? "" :
                                <span>
                                    {/* <PiWineFill size={20} color='#4e1173' /> */}
                                    <svg width="15" height="20" viewBox="0 0 15 20" fill="none" xmlns="http://www.w3.org/2000/svg">
                                        <path fill-rule="evenodd" clip-rule="evenodd" d="M3.97725 0.63127C3.72524 0.651271 3.47985 0.721888 3.25575 0.838898C3.03165 0.955908 2.83345 1.11691 2.673 1.31227C2.41575 1.62727 2.289 2.00977 2.26875 2.40202C2.06311 2.37613 1.85472 2.38169 1.65075 2.41852C1.34151 2.48002 1.05068 2.61222 0.801001 2.80477C0.551403 2.99795 0.349415 3.24578 0.210557 3.52921C0.0716998 3.81265 -0.000330683 4.12415 1.14128e-06 4.43977L0.00450117 5.10502L0.00300128 5.11252V5.16577L0.00150103 5.32102L1.14128e-06 6.05752V6.64327C1.14128e-06 7.18327 0.303001 7.65052 0.744001 7.90477V17.6443C0.744001 18.5968 1.51875 19.3768 2.46975 19.3768H10.2743C11.2253 19.3768 12 18.5968 12 17.6443V16.3918H13.6245C13.9882 16.392 14.3372 16.248 14.595 15.9915C14.8528 15.735 14.9984 15.3867 15 15.023V8.74627C14.9986 8.38244 14.8531 8.034 14.5952 7.7773C14.3374 7.5206 13.9883 7.37657 13.6245 7.37677H12V6.24727C12.369 5.96977 12.6375 5.56102 12.7223 5.07727C12.7984 4.63387 12.7128 4.17787 12.4809 3.7923C12.2491 3.40674 11.8866 3.11724 11.4593 2.97652C11.3774 2.7196 11.237 2.48518 11.0492 2.29167C10.8614 2.09815 10.6313 1.95083 10.377 1.86127C10.0643 1.75494 9.72791 1.73959 9.40686 1.817C9.08582 1.89441 8.79335 2.06139 8.5635 2.29852C8.38285 2.05166 8.15384 1.84416 7.89042 1.68866C7.62699 1.53316 7.33467 1.43291 7.03125 1.39402C6.59584 1.34099 6.15444 1.4166 5.7615 1.61152C5.63199 1.36856 5.45029 1.15729 5.22946 0.992869C5.00863 0.828445 4.75414 0.714947 4.48425 0.66052C4.31739 0.627571 4.14683 0.618229 3.97725 0.63127ZM4.03575 1.37977C4.26747 1.36193 4.49898 1.41687 4.69797 1.53694C4.89696 1.65701 5.05351 1.8362 5.14575 2.04952C5.06848 2.12742 4.99703 2.21089 4.932 2.29927C4.90295 2.33911 4.88202 2.38428 4.87043 2.43221C4.85883 2.48013 4.85678 2.52987 4.86441 2.57859C4.87981 2.67698 4.93367 2.76522 5.01413 2.82389C5.09459 2.88257 5.19506 2.90689 5.29345 2.89149C5.34216 2.88386 5.3889 2.86671 5.43099 2.84102C5.47308 2.81534 5.5097 2.78161 5.53875 2.74177C5.696 2.52591 5.9081 2.35602 6.15309 2.2497C6.39808 2.14339 6.66704 2.10451 6.93211 2.1371C7.19717 2.16968 7.44871 2.27255 7.66065 2.43505C7.87259 2.59754 8.03722 2.81375 8.1375 3.06127C8.13659 3.15018 8.1673 3.23651 8.22416 3.30487C8.281 3.37323 8.36029 3.41917 8.44788 3.43449C8.53546 3.44981 8.62563 3.43351 8.70231 3.3885C8.77899 3.34349 8.83718 3.27271 8.8665 3.18877C8.9082 3.06445 8.97418 2.94965 9.06061 2.85104C9.14704 2.75242 9.2522 2.67196 9.36998 2.61433C9.48776 2.55669 9.61582 2.52303 9.74672 2.5153C9.87762 2.50756 10.0088 2.52591 10.1325 2.56927C10.6553 2.75002 10.9305 3.31477 10.752 3.84427C10.7346 3.89129 10.7268 3.94133 10.7291 3.99141C10.7314 4.04149 10.7437 4.0906 10.7653 4.13584C10.7869 4.18108 10.8174 4.22153 10.8549 4.2548C10.8924 4.28807 10.9362 4.31348 10.9837 4.32953C11.0312 4.34558 11.0814 4.35194 11.1314 4.34824C11.1814 4.34454 11.2302 4.33085 11.2748 4.30799C11.3194 4.28512 11.359 4.25354 11.3912 4.21512C11.4234 4.17669 11.4475 4.1322 11.4623 4.08427C11.4908 4.00027 11.5058 3.91477 11.5208 3.83002C11.8703 4.07452 12.0608 4.50202 11.9828 4.94677C11.9351 5.22448 11.7844 5.47399 11.5609 5.64553C11.3373 5.81708 11.0573 5.89804 10.7768 5.87227C10.4959 5.84852 10.2343 5.71988 10.0441 5.51196C9.8538 5.30405 9.74881 5.0321 9.75 4.75027C9.75099 4.67906 9.73168 4.60904 9.69433 4.5484C9.65697 4.48776 9.60313 4.43901 9.53909 4.40786C9.47504 4.3767 9.40346 4.36443 9.33269 4.37247C9.26193 4.38051 9.19492 4.40854 9.1395 4.45327C8.97241 4.4039 8.79923 4.37815 8.625 4.37677C8.1277 4.37756 7.65102 4.57557 7.29952 4.92735C6.94802 5.27914 6.7504 5.75597 6.75 6.25327C6.74966 6.28227 6.75268 6.31121 6.759 6.33952C6.75285 6.36709 6.74983 6.39527 6.75 6.42352V8.15602C6.75 8.55652 6.4275 8.87677 6 8.87677C5.5725 8.87677 5.25 8.55652 5.25 8.15677V6.26377C5.25 5.45152 4.57125 4.79377 3.7545 4.79377H3.7455C2.928 4.79377 2.25 5.44927 2.25 6.26227V6.42352C2.24866 6.43273 2.24766 6.44199 2.247 6.45127L2.2425 6.63577C2.24247 6.63852 2.24247 6.64127 2.2425 6.64402C2.2425 7.04002 1.91925 7.36102 1.4985 7.36102H1.494C1.39842 7.36642 1.30274 7.35228 1.2128 7.31946C1.12287 7.28664 1.04057 7.23582 0.970938 7.17012C0.901306 7.10442 0.8458 7.02521 0.807813 6.93733C0.769826 6.84945 0.750154 6.75476 0.750001 6.65902V6.11377H0.754501V5.17177L0.750001 4.43977C0.750001 4.03102 0.938251 3.64627 1.26 3.39802C1.58025 3.15052 1.9935 3.06877 2.3835 3.17302C2.388 3.18577 2.388 3.19927 2.39325 3.21202C2.43154 3.30392 2.50477 3.37684 2.59683 3.41475C2.68888 3.45265 2.79223 3.45244 2.88413 3.41414C2.97602 3.37585 3.04895 3.30263 3.08685 3.21057C3.12476 3.11851 3.12454 3.01517 3.08625 2.92327C3.0082 2.73656 2.98253 2.53211 3.012 2.33191C3.04147 2.1317 3.12496 1.94332 3.2535 1.78702C3.45 1.54702 3.7335 1.40302 4.03575 1.37977ZM8.625 5.12677C8.77725 5.12677 8.92725 5.16727 9.0705 5.22952C9.16848 5.60137 9.37838 5.93411 9.67177 6.1827C9.96516 6.43128 10.3279 6.58368 10.7108 6.61927C10.896 6.63577 11.0753 6.61627 11.25 6.57952V17.6443C11.25 18.197 10.8203 18.6275 10.275 18.6275H2.469C1.923 18.6275 1.494 18.197 1.494 17.645V8.11027H1.49775C2.31375 8.11027 2.99175 7.45477 2.99175 6.64327L2.99475 6.50827C2.99819 6.48795 2.99994 6.46738 3 6.44677V6.26227C3 5.86552 3.324 5.54227 3.7455 5.54227H3.7545C4.176 5.54227 4.5 5.86552 4.5 6.26227V8.15602C4.5 8.96977 5.18025 9.62677 6 9.62677C6.81975 9.62677 7.5 8.96977 7.5 8.15677V6.42352C7.50041 6.39427 7.49738 6.36507 7.491 6.33652C7.4971 6.30919 7.50012 6.28127 7.5 6.25327C7.4998 6.10541 7.52876 5.95895 7.58521 5.82229C7.64165 5.68563 7.72449 5.56143 7.82898 5.4568C7.93346 5.35218 8.05755 5.26918 8.19414 5.21255C8.33072 5.15592 8.47714 5.12677 8.625 5.12677ZM12 8.12677H13.6245C13.9995 8.12677 14.25 8.37727 14.25 8.74627V15.0238C14.25 15.392 13.9995 15.6425 13.6245 15.6425H12V8.12677ZM3.369 9.88627C3.31975 9.88705 3.27114 9.89753 3.22594 9.9171C3.18075 9.93667 3.13985 9.96495 3.10558 10.0003C3.07131 10.0357 3.04435 10.0775 3.02624 10.1233C3.00812 10.1691 2.99921 10.218 3 10.2673V16.9745C3 17.074 3.03951 17.1694 3.10984 17.2397C3.18016 17.31 3.27554 17.3495 3.375 17.3495C3.47446 17.3495 3.56984 17.31 3.64017 17.2397C3.71049 17.1694 3.75 17.074 3.75 16.9745V10.2673C3.75081 10.217 3.74151 10.1671 3.72265 10.1205C3.70379 10.0739 3.67576 10.0316 3.64021 9.99606C3.60467 9.96051 3.56235 9.93248 3.51576 9.91362C3.46917 9.89476 3.41926 9.88546 3.369 9.88627ZM6.369 9.88627C6.31975 9.88705 6.27114 9.89753 6.22594 9.9171C6.18075 9.93667 6.13985 9.96495 6.10558 10.0003C6.07131 10.0357 6.04435 10.0775 6.02624 10.1233C6.00812 10.1691 5.99921 10.218 6 10.2673V16.9745C6 17.074 6.03951 17.1694 6.10984 17.2397C6.18016 17.31 6.27555 17.3495 6.375 17.3495C6.47446 17.3495 6.56984 17.31 6.64017 17.2397C6.71049 17.1694 6.75 17.074 6.75 16.9745V10.2673C6.75081 10.217 6.74151 10.1671 6.72265 10.1205C6.70379 10.0739 6.67576 10.0316 6.64022 9.99606C6.60467 9.96051 6.56235 9.93248 6.51576 9.91362C6.46917 9.89476 6.41926 9.88546 6.369 9.88627ZM9.369 9.88627C9.31975 9.88705 9.27114 9.89753 9.22594 9.9171C9.18075 9.93667 9.13984 9.96495 9.10558 10.0003C9.07131 10.0357 9.04435 10.0775 9.02624 10.1233C9.00812 10.1691 8.99921 10.218 9 10.2673V16.9745C9 17.074 9.03951 17.1694 9.10984 17.2397C9.18016 17.31 9.27555 17.3495 9.375 17.3495C9.47446 17.3495 9.56984 17.31 9.64017 17.2397C9.71049 17.1694 9.75 17.074 9.75 16.9745V10.2673C9.75081 10.217 9.74151 10.1671 9.72265 10.1205C9.70379 10.0739 9.67576 10.0316 9.64021 9.99606C9.60467 9.96051 9.56235 9.93248 9.51576 9.91362C9.46917 9.89476 9.41926 9.88546 9.369 9.88627Z" fill="#4E1173" />
                                    </svg>

                                    <p>{profile.drink}</p>
                                </span>
                        }

                    </div>
                    <div className={styles.smokeDrink}>

                    </div>

                    {/* {
                        profile.answers?.map(answer => (
                            <div key={answer.id}>
                                <p className={styles.heading}>{answer.question}</p>
                                <p className={styles.subHeading}>{answer.answer}</p>
                            </div>
                        ))
                    } */}


                    <div className={styles.personalityContainer}>
                        <span className={styles.heading}>Traits & Interests</span>
                        <div className={styles.personalities} style={{ alignItems: "center", justifyContent: "center" }}>
                            {
                                profile.personalities?.map((personality, index) => <p key={index}>{personality}</p>)
                            }
                        </div>
                    </div>


                    <div>
                        <div style={{ marginTop: "20px" }}>
                            {
                                media?.length > 1 && (
                                    <img
                                        src={media[1]?.url}
                                        alt=""
                                        style={{
                                            width: '100%',

                                            objectFit: 'cover',
                                            borderRadius: '10px'
                                        }}
                                    />
                                )
                            }
                        </div>

                        <div style={{ marginLeft: "20px" }}>
                            {
                                profile.answers?.length > 1 && (
                                    <div>
                                        <p className={styles.heading}>{profile.answers[0]?.question}</p>
                                        <p className={styles.subHeading}>{profile.answers[0]?.answer}</p>
                                    </div>
                                )
                            }
                        </div>


                        <div style={{ marginTop: "20px" }}>
                            {
                                media?.length > 1 && (
                                    <img
                                        src={media[2]?.url}
                                        alt=""
                                        style={{
                                            width: '100%',

                                            objectFit: 'cover',
                                            borderRadius: '10px'
                                        }}
                                    />
                                )
                            }
                        </div>

                        <div style={{ marginLeft: "20px", marginBottom: "10px" }}>
                            {
                                profile.answers?.length > 1 && (
                                    <div>
                                        <p className={styles.heading}>{profile.answers[1].question}</p>
                                        <p className={styles.subHeading}>{profile.answers[1].answer}</p>
                                    </div>
                                )
                            }
                        </div>


                    </div>
                    {/* <div style={{
                        marginTop: '1rem',
                    }}>
                        <Carousel slide controls interval={null} touch>
                            {
                                media.map((photo, index) => (
                                    <Carousel.Item key={index}>
                                        <img src={photo.url} alt="" style={{
                                            width: '100%',
                                            aspectRatio: "1/1",
                                            objectFit: 'contain',
                                        }} />
                                    </Carousel.Item>
                                ))
                            }
                        </Carousel>
                    </div> */}
                </div>

                {pathname !== '/preview' && (
                    <div id="bottomOptions" className={styles.bottomoptions} style={{
                        // position: "sticky",
                        // zIndex: "50",
                        // bottom: "0",
                        // width: "100%",
                        // display: "flex",
                        // justifyContent: "space-between",
                        // alignItems: "center",
                        // gap: "1rem",
                        // backgroundColor: "white",
                        
                    }}>
                        {/* <IconButton type='undo' onClick={(e) => {
                                e.stopPropagation();
                                handleIconButtonClick("undo");
                            }} /> */}
                        {/* <IconButton type='skip' onClick={(e) => {
                        e.stopPropagation();
                        handleIconButtonClick("skip");
                    }} /> */}
                        <div style={{
                            padding: "1rem",
                            borderRadius: "9999px",
                            // backgroundColor: "#fdf7ff",
                            cursor: "pointer",
                            marginTop: "22px",
                        }}>
                            {/* <AiOutlineClose size={30} color="#4e1173"  onClick={(e) => {
                            e.stopPropagation();
                            handleIconButtonClick("skip");
                        }} /> */}

                            <div onClick={(e) => {
                                e.stopPropagation();
                                handleIconButtonClick("skip");
                            }} >
                                <svg width="60" height="60" viewBox="0 0 60 60" fill="none" xmlns="http://www.w3.org/2000/svg">
                                    <g filter="url(#filter0_d_5015_11487)">
                                        <circle cx="30" cy="26" r="26" fill="#F7ECFF" />
                                    </g>
                                    <g clip-path="url(#clip0_5015_11487)">
                                        <path d="M37.7692 20.6133L23 35.3825M23 20.6133L37.7692 35.3825" stroke="#CCCCCC" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" />
                                        <path d="M37.7692 20.6133L23 35.3825M23 20.6133L37.7692 35.3825" stroke="white" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" />
                                        <path d="M37.7692 20.6133L23 35.3825M23 20.6133L37.7692 35.3825" stroke="white" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" />
                                        <path d="M37.7692 20.6133L23 35.3825M23 20.6133L37.7692 35.3825" stroke="#664778" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" />
                                    </g>
                                    <defs>
                                        <filter id="filter0_d_5015_11487" x="0" y="0" width="60" height="60" filterUnits="userSpaceOnUse" color-interpolation-filters="sRGB">
                                            <feFlood flood-opacity="0" result="BackgroundImageFix" />
                                            <feColorMatrix in="SourceAlpha" type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0" result="hardAlpha" />
                                            <feOffset dy="4" />
                                            <feGaussianBlur stdDeviation="2" />
                                            <feComposite in2="hardAlpha" operator="out" />
                                            <feColorMatrix type="matrix" values="0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.25 0" />
                                            <feBlend mode="normal" in2="BackgroundImageFix" result="effect1_dropShadow_5015_11487" />
                                            <feBlend mode="normal" in="SourceGraphic" in2="effect1_dropShadow_5015_11487" result="shape" />
                                        </filter>
                                        <clipPath id="clip0_5015_11487">
                                            <rect width="17.2308" height="17.2308" fill="white" transform="translate(21 19.3867)" />
                                        </clipPath>
                                    </defs>
                                </svg>




                            </div>

                        </div>
                        {/* <div style={{
                                position: "relative",
                                top: "1.5rem"
                            }} className='scrollBtn'>
                                <IconButton
                                    type={"details"}
                                    onClick={(e) => {
                                        e.stopPropagation();
                                        document.querySelector("#scroll-anchor").scrollIntoView({ behavior: "smooth" });
                                    }} />
                            </div> */}
                        <div style={{
                            display: "flex",
                            alignItems: "end",
                            justifyContent: "center",
                        }}>
                            <IconButton type='chat' onClick={(e) => {
                                e.stopPropagation();
                                handleIconButtonClick("chat");
                            }} />
                            <IconButton type={liked ? 'likeActive' : 'like'} onClick={(e) => {
                                e.stopPropagation();
                                setLiked(!liked);
                                handleIconButtonClick("like");
                            }} />
                            <div>

                            </div>
                        </div>

                    </div>
                )}
            </div>
        </>
    )
}
